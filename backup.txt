 var video = document.querySelector('#content');
    var playButton = document.getElementById('playButton');
    const seekSlider = document.getElementById('seekSlider');
    const muteButton = document.getElementById('muteButton').querySelector('i');
    const volumeSlider = document.getElementById('volumeSlider');
    const fullScreenButton = document.getElementById('fullScreenButton');
    const speedButton = document.getElementById('speedButton');
    const speedDropdown = document.querySelector('.speed-dropdown');
    const pipButton = document.getElementById('pipButton');
    const downloadButton = document.getElementById('downloadButton');
    const videoContainer = document.querySelector('.video-container');
    const videoControls = document.querySelector('.video-controls');
    var playIcon = document.getElementById('play');
    var pauseIcon = document.getElementById('pause');
    var moreOptions = document.querySelector('#moreOptions');

    playButton.addEventListener('click', function() {
        if (video.paused == true) {
            // Play the video
            video.play();
    
            // Update the button icon to 'Pause'
            playIcon.style.display = 'none';
            pauseIcon.style.display = 'block';
        } else {
            // Pause the video
            video.pause();
    
            // Update the button icon to 'Play'
            playIcon.style.display = 'block';
            pauseIcon.style.display = 'none';
        }
    });

    var unmuteIcon = document.getElementById('unmute');
    var muteIcon = document.getElementById('mute');

    videoContainer.addEventListener('mouseover', () => {
    videoControls.style.opacity = '1';
    });

    videoContainer.addEventListener('mouseout', () => {
    videoControls.style.opacity = '1';
    });
    

    seekSlider.addEventListener('input', () => {
      const seekTime = video.duration * (seekSlider.value / 100);
      video.currentTime = seekTime;
    });
    
    video.addEventListener('timeupdate', () => {
      const percent = (video.currentTime / video.duration) * 100;
      seekSlider.value = percent;
    });
    
    muteButton.addEventListener('click', () => {
        if (video.muted) {
          video.muted = false;
          muteButton.classList.remove('fa-mute'); // Replace with appropriate icon class for muted state
          muteButton.classList.add('fa-volume_up'); // Replace with appropriate icon class for unmuted state
    
          // Update the button icon to 'Mute'
          unmuteIcon.style.display = 'block';
          muteIcon.style.display = 'none';
        } else {
          video.muted = true;
          muteButton.classList.remove('fa-volume_up');
          muteButton.classList.add('fa-mute');
    
          // Update the button icon to 'Unmute'
          unmuteIcon.style.display = 'none';
          muteIcon.style.display = 'block';
        }
    });
      
      volumeSlider.addEventListener('input', () => {
        video.volume = volumeSlider.value;
      });

      document.addEventListener('fullscreenchange', function() {
        if (!document.fullscreenElement) {
            video.style.height = '400px';
        }
    });

      fullScreenButton.addEventListener('click', function() {
        if (!document.fullscreenElement) {

          video.style.width = '100%';
          video.style.height = '100%';
            if (video.requestFullscreen) {
              videoContainer.requestFullscreen();requestFullscreen();

            } else if (video.webkitRequestFullscreen) { /* Safari */
              videoContainer.webkitRequestFullscreen();
            } else if (video.msRequestFullscreen) { /* IE11 */
              videoContainer.msRequestFullscreen();
            }
        } else {
          video.style.height = '400px';
            if (document.exitFullscreen) {
                document.exitFullscreen();
                video.style.height = '400px';
            } else if (document.webkitExitFullscreen) { /* Safari */
                document.webkitExitFullscreen();
            } else if (document.msExitFullscreen) { /* IE11 */
                document.msExitFullscreen();
            }
        }

    });

    
      
      

    

    // Optional: Automatically exit fullscreen mode when video endssp
    video.addEventListener('ended', function() {
        if (document.fullscreenElement) {
            document.exitFullscreen();
        }
    });
      
      // Check for browser support (modify as needed)
      if (document.pictureInPictureEnabled) {
        pipButton.addEventListener('click', () => {
          if (video.requestPictureInPicture) {
            video.requestPictureInPicture();
          }
        });
      } else {
        pipButton.classList.add('disabled'); // Add a disabled class for visual indication
      }
      
      speedButton.addEventListener('click', () => {
        speedDropdown.classList.toggle('active');
      });

      speedButton.addEventListener('click', () => {
        speedDropdown.classList.toggle('show-dropdown');
      });
      
      document.addEventListener('click', (event) => {
        if (!speedDropdown.contains(event.target) && speedDropdown.classList.contains('active')) {
          speedDropdown.classList.remove('active');
        }
      });
      
      const speedOptions = speedDropdown.querySelectorAll('li');
      speedOptions.forEach(option => {
        option.addEventListener('click', () => {
          const selectedSpeed = option.dataset.speed;
          video.playbackRate = selectedSpeed;
          speedDropdown.classList.remove('active');
          speedDropdown.classList.remove('show-dropdown');

          // Reset color for all options
          speedOptions.forEach(opt => opt.style.color = '');

          // Change color of selected option
          option.style.color = 'red'; // Change 'red' to any color you want
        });
      });

      
      // Download functionality (highly browser-dependent, consider server-side handling)
      downloadButton.addEventListener('click', () => {
        alert('Download functionality is not fully supported by browsers yet. Consider server-side solutions.');
      });
      
      // Responsive behavior: Hide non-essential controls on small screens
      
      const toggleMoreControls = () => {
        moreControls.classList.toggle('hidden');
      }
      
      const windowWidth = window.innerWidth;
      if (windowWidth < 768) { // Adjust breakpoint as needed
        moreControls.classList.add('hidden');
        playButton.addEventListener('click', toggleMoreControls);
      }
      
      window.addEventListener('resize', () => {
        const newWindowWidth = window.innerWidth;
        if (newWindowWidth >= 768 && moreControls.classList.contains('hidden')) {
          moreControls.classList.remove('hidden');
        } else if (newWindowWidth < 768 && !moreControls.classList.contains('hidden')) {
          moreControls.classList.add('hidden');
        }
      });

      video.addEventListener('timeupdate', function() {
        // Update seek slider value based on video's current time
        const value = (100 / video.duration) * video.currentTime;
        seekSlider.value = value;
    
        // Update the slider background color
        updateSlider(seekSlider);
    });
    

      // Function to update slider background
      function updateSlider(slider, color1 = '#fd0000', color2 = '#808080') {
        // Ensure slider exists and has a valid max and min to avoid division by zero
        if (!slider || slider.max === slider.min) return;
    
        const value = ((slider.value - slider.min) / (slider.max - slider.min)) * 100;
        slider.style.background = `linear-gradient(to right, ${color1} 0%, ${color1} ${value}%, ${color2} ${value}%, ${color2} 100%)`;
    }
      // Update the seek bar slider's background on input
      seekSlider.addEventListener('input', function() {
        updateSlider(this);
        const seekTime = video.duration * (this.value / 100);
        video.currentTime = seekTime;
      });

      // Call updateSlider for seekSlider initially
      updateSlider(seekSlider);

      // Update the volume bar slider's background on input
      volumeSlider.addEventListener('input', function() {
        updateSlider(this);
        video.volume = this.value;
      });

      // Call updateSlider for volumeSlider initially with different colors if needed
      updateSlider(volumeSlider);

      document.getElementById('moreOptions').addEventListener('click', function() {
        var moreOptionsDiv = document.getElementById('options-dropdown');
        if (moreOptionsDiv.style.display === 'none' || moreOptionsDiv.style.display === '') {
            moreOptionsDiv.style.display = 'block';
        } else {
            moreOptionsDiv.style.display = 'none';
        }
    });
        
    const options = document.querySelectorAll('#options-dropdown li');
    options.forEach(option => {
        option.addEventListener('click', () => {
            const optionId = option.id;
            switch (optionId) {
                case 'speedButton':
                    speedButton.click();
                    break;
                case 'pipButton':
                    pipButton.click();
                    break;
                case 'downloadButton':
                    downloadButton.click();
                    break;
                default:
                    break;
            }
        });
    });

    window.onload = function() {
      var video = document.getElementById('content');
  
      if (video.offsetWidth < 550) {
        pipButton.style.display = 'none';
        speedButton.style.display = 'none';
        downloadButton.style.display = 'none';
        moreOptions.style.display = 'block';
      }
      else {
        pipButton.style.display = 'block';
        speedButton.style.display = 'block';
        downloadButton.style.display = 'block';
        moreOptions.style.display = 'none';
      }
  }